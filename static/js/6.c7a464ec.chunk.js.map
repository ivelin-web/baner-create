{"version":3,"sources":["services/BanerService.js","components/baner/EditModal.js","components/baner/Baner.js","components/baner/BanerList.js","pages/home/Home.js"],"names":["BanerService","get","a","axios","withCredentials","res","add","data","post","edit","id","put","remove","delete","EditModal","_id","onEdit","image","text","onHide","useState","selectedFile","setSelectedFile","textInput","setTextInput","isLoading","setIsLoading","errors","setErrors","fileRef","useRef","Modal","show","Header","closeButton","Title","Body","Form","onSubmit","e","preventDefault","FormData","append","then","toast","success","catch","err","response","status","warning","message","Group","className","controlId","Control","isInvalid","onChange","target","value","type","placeholder","Feedback","current","files","ref","src","URL","createObjectURL","alt","style","objectFit","width","process","Button","disabled","Spinner","size","animation","role","onClick","NOT_OWNER_MESSAGE","Baner","userId","showEditModal","setShowEditModal","isUserOwner","useContext","AuthContext","user","deleteBaner","Card","Img","height","variant","Footer","confirmAlert","title","buttons","label","BanerList","baners","setBaners","isFetching","setIsFetching","useEffect","getAllBaners","console","log","finally","handleEditBaner","transform","length","to","map","baner","Home","Container"],"mappings":"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","file":"static/js/6.c7a464ec.chunk.js","sourcesContent":["import axios from \"../axios\";\r\n\r\nexport default class BanerService {\r\n    // Get all baners\r\n    static get = async () => {\r\n        const res = await axios.get(\"/baners\", {\r\n            withCredentials: true,\r\n        });\r\n\r\n        return res;\r\n    };\r\n\r\n    // Add baner\r\n    static add = async (data) => {\r\n        const res = await axios.post(\"/baners\", data, {\r\n            withCredentials: true,\r\n        });\r\n\r\n        return res;\r\n    };\r\n\r\n    // Edit baner\r\n    static edit = async (data, id) => {\r\n        const res = await axios.put(`/baners/${id}`, data, {\r\n            withCredentials: true,\r\n        });\r\n\r\n        return res;\r\n    };\r\n\r\n    // Remove baner\r\n    static remove = async (id) => {\r\n        const res = await axios.delete(`/baners/${id}`, {\r\n            withCredentials: true,\r\n        });\r\n\r\n        return res;\r\n    };\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Button, Form, Modal, Spinner } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport BanerService from \"../../services/BanerService\";\r\n\r\nexport default function EditModal({ _id, onEdit, image, text, onHide }) {\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [textInput, setTextInput] = useState(text);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const fileRef = useRef();\r\n\r\n    const PF = process.env.REACT_APP_PF;\r\n\r\n    const handleTextChange = (e) => {\r\n        setTextInput(e.target.value);\r\n    };\r\n\r\n    const handleFileSelect = () => {\r\n        setSelectedFile(fileRef.current.files[0]);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        setIsLoading(true);\r\n\r\n        const data = new FormData();\r\n\r\n        // Add text to data if text is changed\r\n        textInput !== text && data.append(\"text\", textInput);\r\n\r\n        // Add image to data if image is changed\r\n        selectedFile && data.append(\"image\", selectedFile);\r\n\r\n        BanerService.edit(data, _id)\r\n            .then((res) => {\r\n                onEdit();\r\n                toast.success(\"Your baner was edited successfully\");\r\n            })\r\n            .catch((err) => {\r\n                if (err.response.status === 403) {\r\n                    toast.warning(err.response.data.message);\r\n                    return;\r\n                }\r\n\r\n                setIsLoading(false);\r\n                setErrors(err.response.data.errors);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Modal show={true} onHide={onHide}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Edit Baner</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicText\">\r\n                        <Form.Control isInvalid={errors?.text} onChange={handleTextChange} value={textInput} type=\"text\" placeholder=\"Text\" />\r\n                        <Form.Control.Feedback type=\"invalid\">{errors?.text?.message}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formFile\" className=\"mb-3\">\r\n                        <Form.Control isInvalid={errors?.image} onChange={handleFileSelect} ref={fileRef} className=\"form-control\" type=\"file\" />\r\n                        <Form.Control.Feedback type=\"invalid\">{errors?.image?.message}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    {selectedFile ? <img className=\"img-fluid d-block mb-3\" src={URL.createObjectURL(selectedFile)} alt=\"Image Selected\" style={{ objectFit: \"contain\", width: \"100%\" }} /> : <img className=\"img-fluid d-block mb-3\" src={`${PF}/baners/${image}`} alt=\"Image Selected\" style={{ objectFit: \"contain\", width: \"100%\" }} />}\r\n                    <div className=\"d-flex\">\r\n                        <Button disabled={isLoading || (textInput === text && !selectedFile)} className=\"bg-primary\" type=\"submit\" style={{ width: \"130px\" }}>\r\n                            {isLoading ? (\r\n                                <Spinner size=\"sm\" animation=\"border\" role=\"status\">\r\n                                    <span className=\"visually-hidden\">Loading...</span>\r\n                                </Spinner>\r\n                            ) : (\r\n                                \"Edit Banner\"\r\n                            )}\r\n                        </Button>\r\n                        <Button disabled={isLoading} className=\"ms-auto bg-primary\" onClick={onHide}>\r\n                            Close\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, Card } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./Baner.css\";\r\n\r\nimport { AuthContext } from \"../../context/auth/AuthContext\";\r\nimport EditModal from \"./EditModal\";\r\nimport BanerService from \"../../services/BanerService\";\r\n\r\nconst NOT_OWNER_MESSAGE = \"You are not the owner of this baner\";\r\n\r\nexport default function Baner({ _id, text, image, userId, onEdit }) {\r\n    const [showEditModal, setShowEditModal] = useState(false);\r\n\r\n    const { user } = useContext(AuthContext);\r\n\r\n    // Public folder\r\n    const PF = process.env.REACT_APP_PF;\r\n\r\n    // Check if the current user is owner of the banner\r\n    const isUserOwner = user._id === userId;\r\n\r\n    const handleCloseEditModal = () => {\r\n        setShowEditModal(false);\r\n    };\r\n\r\n    const handleShowEditModal = () => {\r\n        // Check if user is not owner of the banner\r\n        if (!isUserOwner) {\r\n            toast.warning(NOT_OWNER_MESSAGE);\r\n            return;\r\n        }\r\n\r\n        setShowEditModal(true);\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        // Check if user is not owner of the banner\r\n        if (!isUserOwner) {\r\n            toast.warning(NOT_OWNER_MESSAGE);\r\n            return;\r\n        }\r\n\r\n        confirmAlert({\r\n            title: \"Are you sure?\",\r\n            message: \"You want to delete this baner?\",\r\n            buttons: [\r\n                {\r\n                    label: \"Yes, Delete it!\",\r\n                    onClick: deleteBaner,\r\n                },\r\n                {\r\n                    label: \"No\",\r\n                },\r\n            ],\r\n        });\r\n    };\r\n\r\n    const deleteBaner = () => {\r\n        BanerService.remove(_id)\r\n            .then((res) => {\r\n                // Reload baners because change was made\r\n                onEdit();\r\n\r\n                toast.success(res.data.message);\r\n            })\r\n            .catch((err) => {\r\n                toast.warning(err.response.data.message || \"Error\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {showEditModal && <EditModal _id={_id} onEdit={onEdit} image={image} text={text} onHide={handleCloseEditModal} />}\r\n            <Card className=\"p-0 col-10 shadow-lg\">\r\n                <Card.Body className=\"px-0\">\r\n                    <Card.Title className=\"text-center\">{text}</Card.Title>\r\n                    <Card.Img className=\"d-block img-fluid\" style={{ objectFit: \"cover\", width: \"100%\", height: \"25vh\" }} variant=\"top\" src={`${PF}/baners/${image}`} />\r\n                </Card.Body>\r\n                <Card.Footer className=\"d-flex\">\r\n                    <Button onClick={handleShowEditModal} disabled={!isUserOwner} variant=\"success\">\r\n                        Edit\r\n                    </Button>\r\n                    <Button disabled={!isUserOwner} onClick={handleDelete} variant=\"danger ms-auto\">\r\n                        Delete\r\n                    </Button>\r\n                </Card.Footer>\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Baner from \"./Baner\";\r\n\r\nimport BanerService from \"../../services/BanerService\";\r\n\r\nexport default function BanerList() {\r\n    const [baners, setBaners] = useState([]);\r\n    const [isFetching, setIsFetching] = useState(true);\r\n\r\n    useEffect(() => {\r\n        getAllBaners();\r\n    }, []);\r\n\r\n    const getAllBaners = () => {\r\n        if (!isFetching) {\r\n            setIsFetching(true);\r\n        }\r\n\r\n        BanerService.get()\r\n            .then((res) => {\r\n                setBaners(res.data);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err.response);\r\n            })\r\n            .finally(() => {\r\n                setIsFetching(false);\r\n            });\r\n    };\r\n\r\n    const handleEditBaner = () => {\r\n        getAllBaners();\r\n    };\r\n\r\n    if (isFetching) {\r\n        return (\r\n            <div className=\"position-absolute start-50 top-50\" style={{ transform: \"translate(-50%, -50%)\" }}>\r\n                <Spinner size=\"lg\" animation=\"border\" role=\"status\" variant=\"primary\">\r\n                    <span className=\"visually-hidden\">Loading...</span>\r\n                </Spinner>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (baners.length === 0) {\r\n        return (\r\n            <h5 className=\"text-center  \">\r\n                No created baners, create first from <Link to=\"/create\">here</Link>\r\n            </h5>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"row justify-content-center gap-5\">\r\n            {baners.map((baner) => (\r\n                <Baner onEdit={handleEditBaner} key={baner._id} {...baner} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nimport BanerList from \"../../components/baner/BanerList\";\r\n\r\nexport default function Home() {\r\n    return (\r\n        <section className=\"py-4\">\r\n            <Container>\r\n                <h1 className=\"text-center text-primary mb-5\">Baners</h1>\r\n                <BanerList />\r\n            </Container>\r\n        </section>\r\n    );\r\n}\r\n"],"sourceRoot":""}